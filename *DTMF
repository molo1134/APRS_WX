//TO DO
//Add commands for telemetry & debug
//Add command for TX interval
//Add ability to change PIN and commands and store them in SRAM

/* 
PASS is a 4 digit PIN, each digit separated by a comma 
KILL is a 2 digit command, each digit separated by a comma
'0' button is 10, * button is 11, # button is 12 
*/
#define PASS 1, 2, 3, 4
#define KILL 0, 11     // 0 *
#define ENABLE 12, 1   // # 1
#define TIMEOUT 5000   //DTMF timeout in milliseconds

#define DTMF_IN 3 // MODULE RX FLAG, must be ISR pin

unsigned int dtmfTime = 0;
uint8_t dtmfPins[4] = {8, 9, 10, 11}; //Pins for 4 bit parallel input. LSB first
uint8_t dtmfPass[] = {PASS};
uint8_t dtmfKill[] = {KILL};
uint8_t dtmfEnable[] = {ENABLE};
uint8_t dtmfBits[4];
uint8_t passBuffer[5];
uint8_t commandBuffer[3];
uint8_t commandCount = 0;
uint8_t bufCount = 0;
bool dtmfReceived = false;
bool passSuccess = false;
bool killSuccess = false;
bool enableSuccess = false;
bool dtmfAvailable = false;


//------------dtmfSetup------------//
//Set input pins and attach ISR to RX Flag pin
//Must be called in setup()

void dtmfSetup() {
  pinMode(8, INPUT);
  pinMode(9, INPUT);
  pinMode(10, INPUT);
  pinMode(11, INPUT);
  pinMode(DTMF_IN, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(DTMF_IN), dtmfISR, FALLING);
}

//------------dtmfISR------------//
//Read 4 bit parallel into 4 ints for processing later

void dtmfISR() {
  for (int d = 0; d <= 3; d++) {
  dtmfBits[d] = digitalRead(dtmfPins[d]);
  } 
  dtmfAvailable = 1;
} 

//------------dtmfParse------------//
//Records timestamp for first tone received, parses 4 input bytes into a uint8_t, 
//split PIN and command digits into separate arrays

void dtmfParse() {
  uint8_t inByte = 0;
  if (bufCount == 0) { //Record first tone receive time
    dtmfTime = millis();
  }
  for (int i = 0; i < 4; i++) {
    inByte += dtmfBits[i] << i;
  }
  if (inByte == 10) {
    inByte = 0;
  }
  if (bufCount  < 3) {  //split PIN and command digits into separate arrays
    passBuffer[bufCount] = inByte;
  }
  if (bufCount > 3) {
    commandBuffer[commandCount] = inByte;
    commandCount++;
  }
  bufCount++;
  if (bufCount > 5) {
    bufCount = 0;
    commandCount = 0;
    dtmfReceived = true;
  }
  dtmfAvailable = 0; //Clear byte RX flag
}

//------------passVerify------------//

bool passVerify(){
  for (int c = 0; c < 4; c++) { //Compares password string with input string
    if (dtmfPass[c] != passBuffer[c]) {
      Serial.println("INCORRECT PIN");
      return false;
    }
    else {
      passSuccess = true;
      Serial.println("PASSWORD ACCEPTED");
      return true;
    }
  }   
}

//------------killVerify------------//

bool killVerify() { //Checks to see if command string matches "Disable"
  
  for (int c = 0; c < 2; c++) {
    if (commandBuffer[c] != dtmfKill[c]) {
      return false;
    }
  }
  killSuccess = true;
  return true;
}

//------------enableVerify------------//

bool enableVerify() { //Checks to see if command string matches "Enable"
  
  for (int c = 0; c < 2; c++) {
    if (commandBuffer[c] != dtmfEnable[c]) {
      return false;
    }
  }
  enableSuccess = true;
  return true;
}

//------------dtmfExecute------------//
//Calls PIN and command parsing functions above & checks for timeout
void dtmfExecute() {
  if (millis() - dtmfTime > TIMEOUT) { //Checks for timeout condition and exits if PIN + command took longer than TIMEOUT setting
    Serial.println("TIMEOUT");
    dtmfReceived = false;
    return;
  }
  if (passVerify() == true) {
      if (killVerify() == true) {
        Serial.println("DISABLED");
      }
      else if (enableVerify() == true) {
        Serial.println("ENABLED");
      }
      else {
        Serial.println("UNKNOWN COMMAND");
      }
  }
  dtmfReceived = false;
}

//-------------------------------------------//

void setup() {
  Serial.begin(115200);
  dtmfSetup();
}

void loop() {
  if (dtmfReceived == true) {
    dtmfExecute();
  }
  if (dtmfAvailable == 1) {
    dtmfParse();
  }
  
}

